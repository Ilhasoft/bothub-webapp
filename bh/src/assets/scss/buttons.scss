@import '~./colors.scss';
@import '~./typography.scss';


.bh {
  &-button {
    $parent: &;

    @include typography();

    @mixin size($size-value) {
      padding: calc(#{($size-value / 3)} - #{$form-components-border-size}) ($size-value / 1.5);
      font-size: ($size-value / 3);
      line-height: ($size-value / 3);
    }

    @include size($size-normal);

    display: inline-flex;
    align-items: center;
    font-weight: $font-weight-bolder;
    color: $color-gray-dark;
    cursor: pointer;
    background: none;
    background-color: $color-fake-white;
    border: $form-components-border-size solid $color-gray;
    border-radius: $form-components-border-radius;
    outline: none;
    box-shadow: .2rem .2rem .5rem rgba(200, 200, 200, .5);

    > * {
      margin-right: .5rem;

      &:last-child {
        margin-right: 0;
      }
    }

    &--rounded {
      border-radius: ($size-normal / 2);
    }

    &--max-content {
      width: max-content;
    }

    &:disabled {
      color: $color-gray;
      cursor: not-allowed;
      background-color: $color-gray-dark;
      border-color: $color-gray-dark;
    }

    @each $size in $sizes {
      $size-name: nth($size, 1);
      $size-value: nth($size, 2);

      &--#{$size-name} {
        @include size($size-value);

        &#{$parent}--rounded {
          border-radius: ($size-value / 2);
        }
      }
    }

    @each $color in $colors {
      $color-name: nth($color, 1);
      $color-value: nth($color, 2);
      $color-inverted: nth($color, 3);

      &--#{$color-name} {
        color: $color-inverted;
        background-color: $color-value;
        border-color: $color-value;

        &-inverted {
          color: $color-value;
          background-color: $color-inverted;
          border-color: $color-inverted;
        }

        &-transparent {
          color: $color-value;
          background-color: transparent;
          border-color: $color-value;
        }
      }
    }
  }
}
